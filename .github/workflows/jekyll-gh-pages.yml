<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nerolex Market</title>
    <style>
        :root {
            --main-bg-color: #0a0a0a;
            --card-bg-color: #151515;
            --text-color: #e0e0e0;
            --accent-color: #6c42f5;
            --accent-glow: 0 0 10px #6c42f5, 0 0 20px #6c42f5;
            --danger-color: #e74c3c;
            --success-color: #2ecc71;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: var(--main-bg-color);
            color: var(--text-color);
            min-height: 100vh;
            overflow-x: hidden;
            background-image: 
                radial-gradient(circle at 10% 20%, rgba(108, 66, 245, 0.1) 0%, transparent 20%),
                radial-gradient(circle at 90% 80%, rgba(108, 66, 245, 0.1) 0%, transparent 20%);
        }
        
        .glow-text {
            text-shadow: var(--accent-glow);
        }
        
        .glow-border {
            border: 1px solid rgba(108, 66, 245, 0.3);
            box-shadow: 0 0 15px rgba(108, 66, 245, 0.3);
        }
        
        nav {
            background-color: rgba(20, 20, 20, 0.95);
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 100;
            backdrop-filter: blur(10px);
            border-bottom: 1px solid var(--accent-color);
        }
        
        .logo {
            font-size: 1.8rem;
            font-weight: bold;
            color: var(--accent-color);
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .nav-links {
            display: flex;
            gap: 1.5rem;
            align-items: center;
        }
        
        .nav-links a {
            color: var(--text-color);
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            position: relative;
        }
        
        .nav-links a:not(.btn):hover {
            color: var(--accent-color);
        }
        
        .nav-links a:not(.btn):after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 50%;
            width: 0;
            height: 2px;
            background: var(--accent-color);
            transition: all 0.3s ease;
            transform: translateX(-50%);
        }
        
        .nav-links a:not(.btn):hover:after {
            width: 70%;
        }
        
        .nav-links a.active {
            color: var(--accent-color);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .page {
            display: none;
            animation: fadeIn 0.5s ease;
        }
        
        .page.active {
            display: block;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .section-title {
            font-size: 1.8rem;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid rgba(108, 66, 245, 0.3);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .btn {
            background-color: var(--accent-color);
            color: white;
            border: none;
            padding: 0.6rem 1.2rem;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }
        
        .btn:hover {
            background-color: #5a32d8;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(108, 66, 245, 0.4);
        }
        
        .btn-outline {
            background-color: transparent;
            border: 1px solid var(--accent-color);
            color: var(--accent-color);
        }
        
        .btn-outline:hover {
            background-color: rgba(108, 66, 245, 0.1);
        }
        
        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #888;
        }
        
        .empty-state i {
            font-size: 3rem;
            margin-bottom: 1rem;
            display: block;
        }
        
        /* Стили для кликера */
        .clicker-container {
            text-align: center;
            padding: 2rem;
            background-color: var(--card-bg-color);
            border-radius: 12px;
            margin-bottom: 2rem;
        }
        
        .clicker-title {
            font-size: 2rem;
            margin-bottom: 1rem;
            color: var(--accent-color);
        }
        
        .clicker-count {
            font-size: 3rem;
            font-weight: bold;
            margin-bottom: 2rem;
            color: var(--success-color);
        }
        
        .clicker-button {
            width: 200px;
            height: 200px;
            border-radius: 50%;
            background: linear-gradient(145deg, #6c42f5, #8a6cff);
            border: none;
            color: white;
            font-size: 1.5rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 10px 20px rgba(108, 66, 245, 0.3);
            margin-bottom: 2rem;
        }
        
        .clicker-button:hover {
            transform: scale(1.05);
            box-shadow: 0 15px 25px rgba(108, 66, 245, 0.4);
        }
        
        .clicker-button:active {
            transform: scale(0.95);
            box-shadow: 0 5px 15px rgba(108, 66, 245, 0.2);
        }
        
        .clicker-upgrades {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }
        
        .upgrade-card {
            background-color: var(--card-bg-color);
            padding: 1.5rem;
            border-radius: 12px;
            text-align: left;
            transition: transform 0.3s ease;
        }
        
        .upgrade-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(108, 66, 245, 0.2);
        }
        
        .upgrade-title {
            font-size: 1.2rem;
            margin-bottom: 0.5rem;
            color: var(--accent-color);
        }
        
        .upgrade-description {
            color: #aaa;
            margin-bottom: 1rem;
            font-size: 0.9rem;
        }
        
        .upgrade-price {
            color: var(--success-color);
            font-weight: bold;
            margin-bottom: 1rem;
        }
        
        .upgrade-level {
            color: #888;
            font-size: 0.9rem;
            margin-bottom: 1rem;
        }
        
        /* Стили для товаров */
        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }
        
        .product-card {
            background-color: var(--card-bg-color);
            border-radius: 12px;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            position: relative;
        }
        
        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(108, 66, 245, 0.2);
        }
        
        .product-image {
            width: 100%;
            height: 180px;
            background: linear-gradient(45deg, #1a1a2e, #16213e);
            display: flex;
            align-items: center;
            justify-content: center;
            color: #555;
            font-size: 4rem;
            position: relative;
            overflow: hidden;
        }
        
        .product-info {
            padding: 1.2rem;
        }
        
        .product-title {
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        
        .product-description {
            color: #aaa;
            font-size: 0.9rem;
            margin-bottom: 1rem;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
        
        .product-price {
            color: var(--accent-color);
            font-weight: bold;
            font-size: 1.3rem;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .product-category {
            background-color: rgba(108, 66, 245, 0.2);
            color: var(--accent-color);
            padding: 0.3rem 0.6rem;
            border-radius: 20px;
            font-size: 0.8rem;
            display: inline-block;
            margin-bottom: 0.5rem;
        }
        
        .product-seller {
            color: #888;
            font-size: 0.85rem;
            margin-bottom: 1rem;
        }
        
        /* Анимации */
        @keyframes coinAnimation {
            0% { transform: translateY(0) rotate(0deg); opacity: 1; }
            to { transform: translateY(-100px) rotate(360deg); opacity: 0; }
        }
        
        .coin {
            position: absolute;
            font-size: 2rem;
            animation: coinAnimation 1s forwards;
            pointer-events: none;
        }
        
        /* Модальные окна */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(5px);
        }
        
        .modal.active {
            display: flex;
            animation: fadeIn 0.3s ease;
        }
        
        .modal-content {
            background-color: var(--card-bg-color);
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
        }
        
        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid rgba(108, 66, 245, 0.3);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .modal-title {
            font-size: 1.3rem;
            color: var(--accent-color);
        }
        
        .modal-close {
            background: none;
            border: none;
            color: var(--text-color);
            font-size: 1.5rem;
            cursor: pointer;
            transition: color 0.3s ease;
        }
        
        .modal-close:hover {
            color: var(--accent-color);
        }
        
        .modal-body {
            padding: 1.5rem;
        }
        
        .modal-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid rgba(108, 66, 245, 0.3);
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }
        
        .form-control {
            width: 100%;
            padding: 0.75rem;
            background-color: rgba(30, 30, 30, 0.7);
            border: 1px solid #333;
            border-radius: 6px;
            color: var(--text-color);
            transition: all 0.3s ease;
        }
        
        .form-control:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 3px rgba(108, 66, 245, 0.3);
        }
        
        /* Профиль */
        .profile-header {
            display: flex;
            align-items: center;
            gap: 2rem;
            margin-bottom: 2rem;
            padding: 1.5rem;
            background-color: var(--card-bg-color);
            border-radius: 12px;
        }
        
        .avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background: linear-gradient(45deg, #1a1a2e, #16213e);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2.5rem;
            color: var(--accent-color);
        }
        
        .user-info {
            flex-grow: 1;
        }
        
        .username {
            font-size: 1.8rem;
            margin-bottom: 0.5rem;
            color: var(--accent-color);
        }
        
        .balance-info {
            display: flex;
            gap: 2rem;
            margin-top: 1rem;
        }
        
        .balance-item {
            background-color: rgba(30, 30, 30, 0.7);
            padding: 1rem;
            border-radius: 8px;
            min-width: 150px;
        }
        
        .balance-label {
            font-size: 0.9rem;
            color: #aaa;
            margin-bottom: 0.5rem;
        }
        
        .balance-amount {
            font-size: 1.3rem;
            font-weight: bold;
        }
        
        .available-balance {
            color: var(--success-color);
        }
        
        .frozen-balance {
            color: #e67e22;
        }
        
        .notification {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .notification-success {
            background-color: rgba(46, 204, 113, 0.2);
            border-left: 4px solid var(--success-color);
        }
        
        .notification-error {
            background-color: rgba(231, 76, 60, 0.2);
            border-left: 4px solid var(--danger-color);
        }
        
        .notification-info {
            background-color: rgba(52, 152, 219, 0.2);
            border-left: 4px solid #3498db;
        }
    </style>
</head>
<body>
    <nav>
        <a href="#" class="logo glow-text">
            <i class="icon">🛒</i> Nerolex Market
        </a>
        <div class="nav-links">
            <a href="#" class="nav-link active" data-page="main">Главная</a>
            <a href="#" class="nav-link" data-page="clicker">Кликер</a>
            <a href="#" class="nav-link" data-page="profile">Профиль</a>
            <a href="#" class="btn" id="authBtn">Войти</a>
        </div>
    </nav>

    <div class="container">
        <!-- Главная страница -->
        <div id="main" class="page active">
            <div class="section-title">
                <span>Торговая площадка</span>
                <button class="btn" id="addProductBtn">Добавить товар</button>
            </div>
            
            <div class="products-grid" id="products-grid">
                <!-- Товары будут добавляться через JavaScript -->
            </div>
        </div>

        <!-- Страница кликера -->
        <div id="clicker" class="page">
            <div class="clicker-container">
                <h1 class="clicker-title">Nerolex Кликер</h1>
                <div class="clicker-count" id="clickerCount">0 монет</div>
                <button class="clicker-button" id="clickButton">КЛИКАЙ!</button>
                <p>Нажимай на кнопку, чтобы зарабатывать монеты</p>
                <p>Заработанные монеты можно использовать для покупки товаров на торговой площадке</p>
            </div>
            
            <div class="section-title">
                <span>Улучшения</span>
            </div>
            
            <div class="clicker-upgrades">
                <div class="upgrade-card">
                    <h3 class="upgrade-title">Усиленный клик</h3>
                    <p class="upgrade-description">Увеличивает количество монет за клик</p>
                    <div class="upgrade-level">Уровень: <span id="clickPowerLevel">1</span></div>
                    <div class="upgrade-price">Цена: <span id="clickPowerPrice">100</span> монет</div>
                    <button class="btn" id="buyClickPower">Купить</button>
                </div>
                
                <div class="upgrade-card">
                    <h3 class="upgrade-title">Автокликер</h3>
                    <p class="upgrade-description">Автоматически кликает каждые 5 секунд</p>
                    <div class="upgrade-level">Уровень: <span id="autoClickerLevel">0</span></div>
                    <div class="upgrade-price">Цена: <span id="autoClickerPrice">500</span> монет</div>
                    <button class="btn" id="buyAutoClicker">Купить</button>
                </div>
                
                <div class="upgrade-card">
                    <h3 class="upgrade-title">Удвоитель</h3>
                    <p class="upgrade-description">Удваивает доход от всех кликов на 1 час</p>
                    <div class="upgrade-level">Доступно: <span id="doublerCount">0</span></div>
                    <div class="upgrade-price">Цена: <span id="doublerPrice">1000</span> монет</div>
                    <button class="btn" id="buyDoubler">Купить</button>
                </div>
            </div>
        </div>

        <!-- Страница профиля -->
        <div id="profile" class="page">
            <div class="profile-header">
                <div class="avatar" id="userAvatar">U</div>
                <div class="user-info">
                    <h1 class="username" id="username">Имя пользователя</h1>
                    <p id="userEmail">user@example.com</p>
                    
                    <div class="balance-info">
                        <div class="balance-item">
                            <div class="balance-label">Доступно</div>
                            <div class="balance-amount available-balance" id="availableBalance">0 монет</div>
                        </div>
                        
                        <div class="balance-item">
                            <div class="balance-label">Заморожено</div>
                            <div class="balance-amount frozen-balance" id="frozenBalance">0 монет</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="section-title">
                <span>Мои товары</span>
                <button class="btn" id="addProductBtnProfile">Добавить товар</button>
            </div>
            
            <div class="products-grid" id="user-products">
                <!-- Товары пользователя будут добавляться через JavaScript -->
            </div>
        </div>
    </div>

    <!-- Модальное окно авторизации -->
    <div class="modal" id="authModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Вход в аккаунт</h2>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <div class="auth-tabs" style="display: flex; margin-bottom: 1.5rem;">
                    <button class="btn btn-outline" style="flex: 1;" id="loginTabBtn">Вход</button>
                    <button class="btn btn-outline" style="flex: 1;" id="registerTabBtn">Регистрация</button>
                </div>
                
                <div id="login-form">
                    <div class="form-group">
                        <label for="login-email">Email</label>
                        <input type="email" id="login-email" class="form-control" placeholder="Введите email">
                    </div>
                    <div class="form-group">
                        <label for="login-password">Пароль</label>
                        <input type="password" id="login-password" class="form-control" placeholder="Введите пароль">
                    </div>
                    <button class="btn" style="width: 100%; margin-top: 1rem;" id="loginBtn">Войти</button>
                </div>
                
                <div id="register-form" style="display: none;">
                    <div class="form-group">
                        <label for="register-name">Имя пользователя</label>
                        <input type="text" id="register-name" class="form-control" placeholder="Придумайте имя">
                    </div>
                    <div class="form-group">
                        <label for="register-email">Email</label>
                        <input type="email" id="register-email" class="form-control" placeholder="Введите email">
                    </div>
                    <div class="form-group">
                        <label for="register-password">Пароль</label>
                        <input type="password" id="register-password" class="form-control" placeholder="Придумайте пароль">
                    </div>
                    <div class="form-group">
                        <label for="register-password-confirm">Подтверждение пароля</label>
                        <input type="password" id="register-password-confirm" class="form-control" placeholder="Повторите пароль">
                    </div>
                    <button class="btn" style="width: 100%; margin-top: 1rem;" id="registerBtn">Зарегистрироваться</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Модальное окно добавления товара -->
    <div class="modal" id="addProductModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Добавление товара</h2>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="product-title">Название товара</label>
                    <input type="text" id="product-title" class="form-control" placeholder="Например: Игровой аккаунт">
                </div>
                
                <div class="form-group">
                    <label for="product-description">Описание товара</label>
                    <textarea id="product-description" class="form-control" placeholder="Подробно опишите товар, его состояние, особенности и т.д."></textarea>
                </div>
                
                <div class="form-group">
                    <label for="product-category">Категория</label>
                    <select id="product-category" class="form-control">
                        <option value="">Выберите категорию</option>
                        <option value="accounts">Игровые аккаунты</option>
                        <option value="items">Внутриигровые предметы</option>
                        <option value="currency">Игровая валюта</option>
                        <option value="services">Услуги</option>
                        <option value="other">Разное</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="product-price">Цена (монет)</label>
                    <input type="number" id="product-price" class="form-control" placeholder="0">
                </div>
                
                <div class="form-group">
                    <label for="product-image">Изображение товара (URL)</label>
                    <input type="text" id="product-image" class="form-control" placeholder="https://example.com/image.jpg">
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" id="cancelProductBtn">Отмена</button>
                <button class="btn" id="saveProductBtn">Добавить товар</button>
            </div>
        </div>
    </div>

    <!-- Модальное окно покупки товара -->
    <div class="modal" id="buyProductModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Покупка товара</h2>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <div id="buy-product-info">
                    <!-- Информация о товаре будет добавляться через JavaScript -->
                </div>
                
                <div class="form-group">
                    <label for="buyer-message">Сообщение продавцу (необязательно)</label>
                    <textarea id="buyer-message" class="form-control" placeholder="Укажите дополнительную информацию для продавца"></textarea>
                </div>
                
                <div class="notification notification-info">
                    <i class="icon">💡</i> 
                    <div>После оплаты средства будут заморожены на 72 часа. Они будут переведены продавцу только после подтверждения получения товара.</div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" id="cancelBuyBtn">Отмена</button>
                <button class="btn" id="confirmBuyBtn">Подтвердить покупку</button>
            </div>
        </div>
    </div>

    <script>
        // Данные для демонстрации - пустой массив
        const sampleProducts = [];
        
        // Данные кликера
        let clickerData = {
            coins: 0,
            clickPower: 1,
            clickPowerLevel: 1,
            clickPowerPrice: 100,
            autoClickerLevel: 0,
            autoClickerPrice: 500,
            doublerCount: 0,
            doublerPrice: 1000,
            doublerActive: false
        };
        
        // Текущий пользователь
        let currentUser = null;
        
        // Загрузка данных из localStorage
        function loadFromLocalStorage() {
            // Очищаем все старые данные о товарах
            localStorage.removeItem('marketProducts');
            
            const savedUser = localStorage.getItem('currentUser');
            if (savedUser) {
                currentUser = JSON.parse(savedUser);
                // Связываем баланс кликера с балансом пользователя
                clickerData.coins = currentUser.balance || 0;
            }
            
            // Загружаем только пользовательские товары
            const savedProducts = localStorage.getItem('userProducts');
            if (savedProducts) {
                sampleProducts.length = 0;
                Array.prototype.push.apply(sampleProducts, JSON.parse(savedProducts));
            }
            
            const savedClickerData = localStorage.getItem('nerolexClickerData');
            if (savedClickerData) {
                const loadedClickerData = JSON.parse(savedClickerData);
                // Сохраняем улучшения, но используем текущий баланс пользователя
                clickerData.clickPower = loadedClickerData.clickPower;
                clickerData.clickPowerLevel = loadedClickerData.clickPowerLevel;
                clickerData.clickPowerPrice = loadedClickerData.clickPowerPrice;
                clickerData.autoClickerLevel = loadedClickerData.autoClickerLevel;
                clickerData.autoClickerPrice = loadedClickerData.autoClickerPrice;
                clickerData.doublerCount = loadedClickerData.doublerCount;
                clickerData.doublerPrice = loadedClickerData.doublerPrice;
                clickerData.doublerActive = loadedClickerData.doublerActive;
            }
            
            updateUI();
        }
        
        // Сохранение данных в localStorage
        function saveToLocalStorage() {
            if (currentUser) {
                // Обновляем баланс пользователя из кликера
                currentUser.balance = clickerData.coins;
                localStorage.setItem('currentUser', JSON.stringify(currentUser));
            }
            // Сохраняем только пользовательские товары
            localStorage.setItem('userProducts', JSON.stringify(sampleProducts));
            localStorage.setItem('nerolexClickerData', JSON.stringify(clickerData));
        }
        
        // Обновление интерфейса
        function updateUI() {
            // Обновляем информацию о пользователе
            updateUserInfo();
            
            // Отображаем товары
            renderProducts(sampleProducts, 'products-grid');
            
            // Обновляем UI кликера
            updateClickerUI();
            
            // Если пользователь авторизован, показываем его товары
            if (currentUser) {
                const userProducts = sampleProducts.filter(p => p.sellerId === currentUser.id);
                renderProducts(userProducts, 'user-products');
            } else {
                document.getElementById('user-products').innerHTML = `
                    <div class="empty-state">
                        <i>🔒</i>
                        <h3>Необходима авторизация</h3>
                        <p>Войдите в систему, чтобы увидеть свои товары</p>
                    </div>
                `;
            }
        }
        
        // Обновление информации о пользователе
        function updateUserInfo() {
            if (!currentUser) {
                document.getElementById('authBtn').textContent = 'Войти';
                document.getElementById('profile').innerHTML = `
                    <div class="empty-state">
                        <i>🔒</i>
                        <h3>Необходима авторизация</h3>
                        <p>Войдите в систему, чтобы увидеть свой профиль</p>
                        <button class="btn" style="margin-top: 1rem;" id="authProfileBtn">Войти</button>
                    </div>
                `;
                
                // Добавляем обработчик для кнопки входа в профиле
                setTimeout(() => {
                    const authProfileBtn = document.getElementById('authProfileBtn');
                    if (authProfileBtn) {
                        authProfileBtn.addEventListener('click', () => {
                            document.getElementById('authModal').classList.add('active');
                        });
                    }
                }, 100);
                
                return;
            }
            
            document.getElementById('authBtn').textContent = 'Выйти';
            document.getElementById('username').textContent = currentUser.username;
            document.getElementById('userEmail').textContent = currentUser.email;
            document.getElementById('availableBalance').textContent = currentUser.balance + ' монет';
            document.getElementById('frozenBalance').textContent = (currentUser.frozenBalance || 0) + ' монет';
            
            // Обновляем аватар
            document.getElementById('userAvatar').textContent = currentUser.username.charAt(0).toUpperCase();
        }
        
        // Обновление интерфейса кликера
        function updateClickerUI() {
            document.getElementById('clickerCount').textContent = `${clickerData.coins} монет`;
            document.getElementById('clickPowerLevel').textContent = clickerData.clickPowerLevel;
            document.getElementById('clickPowerPrice').textContent = clickerData.clickPowerPrice;
            document.getElementById('autoClickerLevel').textContent = clickerData.autoClickerLevel;
            document.getElementById('autoClickerPrice').textContent = clickerData.autoClickerPrice;
            document.getElementById('doublerCount').textContent = clickerData.doublerCount;
            document.getElementById('doublerPrice').textContent = clickerData.doublerPrice;
            
            // Обновляем состояние кнопок
            document.getElementById('buyClickPower').disabled = clickerData.coins < clickerData.clickPowerPrice;
            document.getElementById('buyAutoClicker').disabled = clickerData.coins < clickerData.autoClickerPrice;
            document.getElementById('buyDoubler').disabled = clickerData.coins < clickerData.doublerPrice;
        }
        
        // Функция отображения товаров
        function renderProducts(products, containerId) {
            const container = document.getElementById(containerId);
            
            if (products.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i>📦</i>
                        <h3>Товаров нет</h3>
                        <p>Пока не добавлено ни одного товара</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = '';
            
            products.forEach(product => {
                const productCard = document.createElement('div');
                productCard.className = 'product-card glow-border';
                productCard.innerHTML = `
                    <div class="product-image">
                        ${product.image ? `<img src="${product.image}" alt="${product.title}" style="width:100%;height:100%;object-fit:cover;">` : '📦'}
                    </div>
                    <div class="product-info">
                        <span class="product-category">${getCategoryName(product.category)}</span>
                        <h3 class="product-title">${product.title}</h3>
                        <p class="product-description">${product.description}</p>
                        <div class="product-price">
                            <span>${product.price} монет</span>
                            ${containerId !== 'user-products' ? `<button class="btn buy-btn" data-id="${product.id}">Купить</button>` : ''}
                        </div>
                        <p class="product-seller">Продавец: ${product.seller}</p>
                    </div>
                `;
                container.appendChild(productCard);
            });
            
            // Добавляем обработчики для кнопок покупки
            if (containerId !== 'user-products') {
                document.querySelectorAll('.buy-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const productId = parseInt(this.getAttribute('data-id'));
                        showBuyProductModal(productId);
                    });
                });
            }
        }
        
        // Получение названия категории по ключу
        function getCategoryName(categoryKey) {
            const categories = {
                'accounts': 'Игровые аккаунты',
                'items': 'Внутриигровые предметы',
                'currency': 'Игровая валюта',
                'services': 'Услуги',
                'other': 'Разное'
            };
            return categories[categoryKey] || 'Другое';
        }
        
        // Функция клика
        function handleClick() {
            if (!currentUser) {
                alert('Для использования кликера необходимо авторизоваться');
                document.getElementById('authModal').classList.add('active');
                return;
            }
            
            // Добавляем монеты
            let coinsToAdd = clickerData.clickPower;
            if (clickerData.doublerActive) {
                coinsToAdd *= 2;
            }
            clickerData.coins += coinsToAdd;
            
            // Создаем летящую монету
            const coin = document.createElement('div');
            coin.className = 'coin';
            coin.textContent = `+${coinsToAdd}`;
            coin.style.left = `${event.clientX - 20}px`;
            coin.style.top = `${event.clientY - 20}px`;
            document.body.appendChild(coin);
            
            // Удаляем монету после анимации
            setTimeout(() => {
                coin.remove();
            }, 1000);
            
            // Сохраняем и обновляем UI
            saveToLocalStorage();
            updateClickerUI();
        }
        
        // Покупка улучшения клика
        function buyClickPower() {
            if (clickerData.coins >= clickerData.clickPowerPrice) {
                clickerData.coins -= clickerData.clickPowerPrice;
                clickerData.clickPowerLevel++;
                clickerData.clickPower += 1;
                clickerData.clickPowerPrice = Math.floor(clickerData.clickPowerPrice * 1.5);
                
                saveToLocalStorage();
                updateClickerUI();
                
                // Визуальная обратная связь
                alert('Улучшение куплено! Теперь вы получаете больше монет за клик.');
            }
        }
        
        // Покупка автокликера
        function buyAutoClicker() {
            if (clickerData.coins >= clickerData.autoClickerPrice) {
                clickerData.coins -= clickerData.autoClickerPrice;
                clickerData.autoClickerLevel++;
                clickerData.autoClickerPrice = Math.floor(clickerData.autoClickerPrice * 2);
                
                // Запускаем автокликер, если это первая покупка
                if (clickerData.autoClickerLevel === 1) {
                    startAutoClicker();
                }
                
                saveToLocalStorage();
                updateClickerUI();
                
                alert('Автокликер куплен! Теперь вы получаете монеты автоматически.');
            }
        }
        
        // Запуск автокликера
        function startAutoClicker() {
            setInterval(() => {
                if (clickerData.autoClickerLevel > 0 && currentUser) {
                    let coinsToAdd = clickerData.autoClickerLevel;
                    if (clickerData.doublerActive) {
                        coinsToAdd *= 2;
                    }
                    clickerData.coins += coinsToAdd;
                    saveToLocalStorage();
                    updateClickerUI();
                }
            }, 5000); // Каждые 5 секунд
        }
        
        // Покупка удвоителя
        function buyDoubler() {
            if (clickerData.coins >= clickerData.doublerPrice) {
                clickerData.coins -= clickerData.doublerPrice;
                clickerData.doublerCount++;
                clickerData.doublerPrice = Math.floor(clickerData.doublerPrice * 1.8);
                
                saveToLocalStorage();
                updateClickerUI();
                
                alert('Удвоитель куплен! Активируйте его в нужный момент для удвоения дохода.');
            }
        }
        
        // Активация удвоителя
        function activateDoubler() {
            if (clickerData.doublerCount > 0) {
                clickerData.doublerCount--;
                clickerData.doublerActive = true;
                
                saveToLocalStorage();
                updateClickerUI();
                
                // Удвоитель действует 1 час
                setTimeout(() => {
                    clickerData.doublerActive = false;
                    saveToLocalStorage();
                    updateClickerUI();
                    alert('Действие удвоителя закончилось.');
                }, 3600000); // 1 час
                
                alert('Удвоитель активирован! В течение часа вы будете получать в 2 раза больше монет.');
            }
        }
        
        // Показать модальное окно покупки товара
        function showBuyProductModal(productId) {
            if (!currentUser) {
                alert('Для покупки товара необходимо авторизоваться');
                document.getElementById('authModal').classList.add('active');
                return;
            }
            
            const product = sampleProducts.find(p => p.id === productId);
            if (!product) return;
            
            // Нельзя покупать собственные товары
            if (product.sellerId === currentUser.id) {
                alert('Вы не можете покупать свои собственные товары');
                return;
            }
            
            document.getElementById('buy-product-info').innerHTML = `
                <div style="display: flex; gap: 1rem; margin-bottom: 1rem;">
                    <div style="width: 80px; height: 80px; background: #1a1a2e; display: flex; align-items: center; justify-content: center; border-radius: 8px;">
                        ${product.image ? `<img src="${product.image}" alt="${product.title}" style="width:100%;height:100%;object-fit:cover;border-radius:8px;">` : '📦'}
                    </div>
                    <div>
                        <h3>${product.title}</h3>
                        <p>Категория: ${getCategoryName(product.category)}</p>
                        <p class="product-price">${product.price} монет</p>
                    </div>
                </div>
                <p><strong>Продавец:</strong> ${product.seller}</p>
                <p><strong>Описание:</strong> ${product.description}</p>
                <p><strong>Ваш баланс:</strong> ${clickerData.coins} монет</p>
            `;
            
            document.getElementById('buyProductModal').classList.add('active');
            
            // Обработчик подтверждения покупки
            document.getElementById('confirmBuyBtn').onclick = function() {
                processPurchase(product);
            };
        }
        
        // Обработка покупки товара
        function processPurchase(product) {
            if (clickerData.coins < product.price) {
                alert('Недостаточно монет для покупки');
                return;
            }
            
            // Замораживаем средства на 72 часа (3 суток)
            const frozenUntil = new Date();
            frozenUntil.setHours(frozenUntil.getHours() + 72);
            
            // Создаем транзакцию
            const transaction = {
                id: Date.now(),
                type: 'purchase',
                productId: product.id,
                productTitle: product.title,
                amount: product.price,
                date: new Date().toISOString(),
                frozenUntil: frozenUntil.toISOString(),
                status: 'frozen',
                sellerId: product.sellerId,
                sellerName: product.seller
            };
            
            // Обновляем баланс кликера
            clickerData.coins -= product.price;
            
            // Добавляем транзакцию в историю пользователя
            if (!currentUser.transactions) {
                currentUser.transactions = [];
            }
            currentUser.transactions.push(transaction);
            
            // Сохраняем обновленного пользователя
            saveToLocalStorage();
            
            // Обновляем интерфейс
            updateClickerUI();
            
            // Закрываем модальное окно
            document.getElementById('buyProductModal').classList.remove('active');
            
            alert(`Покупка совершена успешно! Средства заморожены на 72 часа.`);
        }
        
        // Регистрация пользователя
        function registerUser() {
            const username = document.getElementById('register-name').value;
            const email = document.getElementById('register-email').value;
            const password = document.getElementById('register-password').value;
            const passwordConfirm = document.getElementById('register-password-confirm').value;
            
            if (!username || !email || !password) {
                alert('Заполните все обязательные поля');
                return;
            }
            
            if (password !== passwordConfirm) {
                alert('Пароли не совпадают');
                return;
            }
            
            // Проверяем, нет ли уже пользователя с таким email
            const users = JSON.parse(localStorage.getItem('marketUsers') || '[]');
            if (users.find(u => u.email === email)) {
                alert('Пользователь с таким email уже зарегистрирован');
                return;
            }
            
            // Создаем нового пользователя
            const newUser = {
                id: Date.now(),
                username,
                email,
                password, // В реальном приложении пароль должен быть захэширован
                balance: 1000, // Начальный баланс
                frozenBalance: 0,
                registrationDate: new Date().toISOString(),
                transactions: []
            };
            
            // Сохраняем пользователя в список пользователей
            users.push(newUser);
            localStorage.setItem('marketUsers', JSON.stringify(users));
            
            // Устанавливаем текущего пользователя
            currentUser = newUser;
            clickerData.coins = currentUser.balance;
            saveToLocalStorage();
            
            // Обновляем интерфейс
            updateUI();
            
            // Закрываем модальное окно
            document.getElementById('authModal').classList.remove('active');
            
            alert('Регистрация прошла успешно! На ваш счет начислено 1000 монет.');
        }
        
        // Вход пользователя
        function loginUser() {
            const email = document.getElementById('login-email').value;
            const password = document.getElementById('login-password').value;
            
            if (!email || !password) {
                alert('Заполните все поля');
                return;
            }
            
            // Загружаем пользователей из localStorage
            const users = JSON.parse(localStorage.getItem('marketUsers') || '[]');
            
            // Ищем пользователя
            const user = users.find(u => u.email === email && u.password === password);
            
            if (!user) {
                alert('Неверный email или пароль');
                return;
            }
            
            // Устанавливаем текущего пользователя
            currentUser = user;
            clickerData.coins = currentUser.balance;
            saveToLocalStorage();
            
            // Обновляем интерфейс
            updateUI();
            
            // Закрываем модальное окно
            document.getElementById('authModal').classList.remove('active');
            
            alert('Вход выполнен успешно!');
        }
        
        // Выход пользователя
        function logoutUser() {
            currentUser = null;
            saveToLocalStorage();
            updateUI();
            alert('Вы вышли из системы');
        }
        
        // Инициализация при загрузке страницы
        document.addEventListener('DOMContentLoaded', function() {
            // Загружаем данные
            loadFromLocalStorage();
            
            // Навигация по страницам
            document.querySelectorAll('.nav-link').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Убираем активный класс у всех ссылок
                    document.querySelectorAll('.nav-link').forEach(l => l.classList.remove('active'));
                    // Добавляем активный класс к текущей ссылке
                    this.classList.add('active');
                    
                    // Скрываем все страницы
                    document.querySelectorAll('.page').forEach(page => {
                        page.classList.remove('active');
                    });
                    
                    // Показываем нужную страницу
                    const pageId = this.getAttribute('data-page');
                    document.getElementById(pageId).classList.add('active');
                    
                    // Обновляем UI кликера при переходе на его страницу
                    if (pageId === 'clicker') {
                        updateClickerUI();
                    }
                });
            });
            
            // Обработчики для кликера
            document.getElementById('clickButton').addEventListener('click', handleClick);
            document.getElementById('buyClickPower').addEventListener('click', buyClickPower);
            document.getElementById('buyAutoClicker').addEventListener('click', buyAutoClicker);
            document.getElementById('buyDoubler').addEventListener('click', buyDoubler);
            
            // Кнопки авторизации
            document.getElementById('authBtn').addEventListener('click', function() {
                if (currentUser) {
                    logoutUser();
                } else {
                    document.getElementById('authModal').classList.add('active');
                    document.getElementById('login-form').style.display = 'block';
                    document.getElementById('register-form').style.display = 'none';
                }
            });
            
            // Переключение между вкладками входа и регистрации
            document.getElementById('loginTabBtn').addEventListener('click', function() {
                document.getElementById('login-form').style.display = 'block';
                document.getElementById('register-form').style.display = 'none';
            });
            
            document.getElementById('registerTabBtn').addEventListener('click', function() {
                document.getElementById('login-form').style.display = 'none';
                document.getElementById('register-form').style.display = 'block';
            });
            
            // Кнопки входа и регистрации
            document.getElementById('loginBtn').addEventListener('click', loginUser);
            document.getElementById('registerBtn').addEventListener('click', registerUser);
            
            // Кнопки добавления товара
            document.getElementById('addProductBtn').addEventListener('click', function() {
                if (!currentUser) {
                    alert('Чтобы добавлять товары, необходимо авторизоваться');
                    document.getElementById('authModal').classList.add('active');
                    return;
                }
                document.getElementById('addProductModal').classList.add('active');
            });
            
            document.getElementById('addProductBtnProfile').addEventListener('click', function() {
                if (!currentUser) {
                    alert('Чтобы добавлять товары, необходимо авторизоваться');
                    document.getElementById('authModal').classList.add('active');
                    return;
                }
                document.getElementById('addProductModal').classList.add('active');
            });
            
            // Сохранение товара
            document.getElementById('saveProductBtn').addEventListener('click', function() {
                const title = document.getElementById('product-title').value;
                const description = document.getElementById('product-description').value;
                const category = document.getElementById('product-category').value;
                const price = parseInt(document.getElementById('product-price').value);
                const image = document.getElementById('product-image').value;
                
                if (!title || !description || !category || !price) {
                    alert('Заполните все обязательные поля');
                    return;
                }
                
                const newProduct = {
                    id: Date.now(),
                    title,
                    description,
                    price,
                    category,
                    seller: currentUser.username,
                    sellerId: currentUser.id,
                    image,
                    date: new Date().toISOString().split('T')[0]
                };
                
                sampleProducts.unshift(newProduct);
                
                // Сохраняем в localStorage
                saveToLocalStorage();
                
                // Обновляем отображение товаров
                updateUI();
                
                // Закрываем модальное окно
                document.getElementById('addProductModal').classList.remove('active');
                
                // Очищаем форму
                document.getElementById('product-title').value = '';
                document.getElementById('product-description').value = '';
                document.getElementById('product-category').value = '';
                document.getElementById('product-price').value = '';
                document.getElementById('product-image').value = '';
                
                alert('Товар успешно добавлен!');
            });
            
            // Закрытие модальных окон
            document.querySelectorAll('.modal-close, .btn-outline').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.modal').forEach(modal => {
                        modal.classList.remove('active');
                    });
                });
            });
            
            // Запускаем автокликер, если он уже куплен
            if (clickerData.autoClickerLevel > 0) {
                startAutoClicker();
            }
        });
    </script>
</body>
</html>
